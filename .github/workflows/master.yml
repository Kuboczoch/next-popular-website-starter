name: Website Build
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    types: [opened, labeled, unlabeled, synchronize]

jobs:
  install-dependencies:
    name: Install dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-modules-
      - name: Install Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile
      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}
  check-style:
    name: Check Styles
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}
      - name: Check Style
        run: yarn check-style
  check-types:
    name: Check Types
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}
      - name: Check Types
        run: yarn check-types
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}
      - name: Test
        run: yarn test:unit
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: JEST Tests            # Name of the check run which will be created
          path: reports/jest-*.xml    # Path to test results
          reporter: jest-junit        # Format of test results
  build-website:
    name: Website Build
    runs-on: ubuntu-latest
    needs: [check-style, check-types]
    timeout-minutes: 5
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}
      - name: Build
        run: yarn build
      - name: Cache next-app-build
        uses: actions/cache@v2
        with:
          path: '.next'
          key: ${{ runner.os }}-next-${{ hashFiles('yarn.lock') }}
  lhci:
    name: Lighthouse check
    if: ${{ contains(github.event.pull_request.labels.*.name, 'lighthouse-check') }}
    runs-on: ubuntu-latest
    needs: build-website
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}
      - name: Cache next-app-build
        uses: actions/cache@v2
        with:
          path: '.next'
          key: ${{ runner.os }}-next-${{ hashFiles('yarn.lock') }}
      - name: Lighthouse Check
        run: |
          sudo npm install -g @lhci/cli@0.8.x
          npm run lighthouse-check
      - name: Upload lighthouse-check results
        uses: actions/upload-artifact@v2
        with:
          name: lighthouse-check-results
          path: |
            .lighthouseci
            !.lighthouseci/*.json
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build-website]
    steps:
      - uses: actions/checkout@v2
      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}
      - name: Install Playwright
        run: npx playwright install --with-deps
      - name: Run your tests
        run: yarn test:e2e
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: playwright-report
          path: reports
